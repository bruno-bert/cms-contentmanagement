/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateApplicationInfoArgs } from "./CreateApplicationInfoArgs";
import { UpdateApplicationInfoArgs } from "./UpdateApplicationInfoArgs";
import { DeleteApplicationInfoArgs } from "./DeleteApplicationInfoArgs";
import { ApplicationInfoCountArgs } from "./ApplicationInfoCountArgs";
import { ApplicationInfoFindManyArgs } from "./ApplicationInfoFindManyArgs";
import { ApplicationInfoFindUniqueArgs } from "./ApplicationInfoFindUniqueArgs";
import { ApplicationInfo } from "./ApplicationInfo";
import { ApplicationInfoService } from "../applicationInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationInfo)
export class ApplicationInfoResolverBase {
  constructor(
    protected readonly service: ApplicationInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationInfo",
    action: "read",
    possession: "any",
  })
  async _applicationInfosMeta(
    @graphql.Args() args: ApplicationInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationInfo])
  @nestAccessControl.UseRoles({
    resource: "ApplicationInfo",
    action: "read",
    possession: "any",
  })
  async applicationInfos(
    @graphql.Args() args: ApplicationInfoFindManyArgs
  ): Promise<ApplicationInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationInfo",
    action: "read",
    possession: "own",
  })
  async applicationInfo(
    @graphql.Args() args: ApplicationInfoFindUniqueArgs
  ): Promise<ApplicationInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationInfo)
  @nestAccessControl.UseRoles({
    resource: "ApplicationInfo",
    action: "create",
    possession: "any",
  })
  async createApplicationInfo(
    @graphql.Args() args: CreateApplicationInfoArgs
  ): Promise<ApplicationInfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationInfo)
  @nestAccessControl.UseRoles({
    resource: "ApplicationInfo",
    action: "update",
    possession: "any",
  })
  async updateApplicationInfo(
    @graphql.Args() args: UpdateApplicationInfoArgs
  ): Promise<ApplicationInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationInfo)
  @nestAccessControl.UseRoles({
    resource: "ApplicationInfo",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationInfo(
    @graphql.Args() args: DeleteApplicationInfoArgs
  ): Promise<ApplicationInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
